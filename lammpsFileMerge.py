#! /usr/bin/env python3

# if you have two Lammps data files (coords, bonds, etc) that you would like to merge into one, 
# this is your program! New atom IDs are assigned. This works on datafiles generated by LigParGen. 
# LigParGen puts molecules in the y plane. Adjust the printAtomData function to add offset in different plane. 

# handle Cartesian coordinates
def printAtomData(f1lines, f2lines, nF1, nF2, offset): 
	print('Atoms')
	print('')
	for i, line in enumerate(f1lines):
		if 'Atoms'in line:
			for j in range(i+2, i+2+nF1):
				print(f1lines[j], end='')
			break 
	for i, line in enumerate(f2lines): 
		if 'Atoms' in f2lines[i]:   
			counter = nF1+1
			for j in range(i+2, i+2+nF2):
				tokens = f2lines[j].split()
				print(str(counter)+' 2 '+str(counter)+' '+str(tokens[3])+' '+str(tokens[4]), end = ' ')
				print(str(float(tokens[5])+offset)+' '+tokens[6])
				counter += 1
	print('')

# handle bonds, angles, etc 
def printDataTop(f1lines, f2lines, nF1, nF2, nAt1, keyword):
	print(keyword)
	print('')
	for i, line in enumerate(f1lines):
		if keyword in f1lines[i]:
			for j in range(i+2, i+2+nF1):
				print(f1lines[j], end='')
			break   
	for i, line in enumerate(f2lines): 
		if keyword in f2lines[i]:   
			counter = nF1+1
			for j in range(i+2, i+2+nF2):
				print(str(counter)+' '+str(counter), end = '  ')
				tokens = f2lines[j].split()
				for k in range(2, len(tokens)): 
					print(str(int(tokens[k])+nAt1), end = ' ')
				print('') 
				counter += 1
			break
	print('')

# handle force field parameters 
def printData(f1lines, f2lines, nF1, nF2, keyword): 
	print(keyword)
	print('')
	for i, line in enumerate(f1lines):
		if keyword in f1lines[i]:
			for j in range(i+2, i+2+nF1):
				print(f1lines[j], end='')
			break	
	for i, line in enumerate(f2lines): 
		if keyword in f2lines[i]:   
			counter = nF1+1
			for j in range(i+2, i+2+nF2):
				print(str(counter), end = ' ')
				tokens = f2lines[j].split()
				for t in range(1, len(tokens)): 
					print(tokens[t]+' ', end = '')
				print('') 
				counter += 1
			break
	print('')

def main():
	f1 = open(args.xyz1, 'r') 
	f2 = open(args.xyz2, 'r') 
	f1lines = f1.readlines()
	f2lines = f2.readlines()
	# extract header info 
	nAtoms1 = int(f1lines[2].split()[0])
	nAtoms2= int(f2lines[2].split()[0])
	nBonds1 = int(f1lines[3].split()[0])
	nBonds2= int(f2lines[3].split()[0])
	nAngles1 = int(f1lines[4].split()[0])
	nAngles2 = int(f2lines[4].split()[0])
	nDiheds1 = int(f1lines[5].split()[0])
	nDiheds2 = int(f2lines[5].split()[0])
	nImp1 = int(f1lines[6].split()[0])
	nImp2 = int(f2lines[6].split()[0])
	nAtTyp1 = int(f1lines[8].split()[0])
	nAtTyp2 = int(f2lines[8].split()[0])
	nBTyp1 = int(f1lines[9].split()[0])
	nBTyp2 = int(f2lines[9].split()[0])
	nAngTyp1 = int(f1lines[10].split()[0])
	nAngTyp2 = int(f2lines[10].split()[0])
	nDiTyp1 = int(f1lines[11].split()[0])
	nDiTyp2 = int(f2lines[11].split()[0])
	nImTyp1 = int(f1lines[12].split()[0])
	nImTyp2 = int(f2lines[12].split()[0])
	# Print header
	print('LAMMPS data file created by combining '+args.xyz1+' and '+args.xyz2)
	print('')
	print(str(nAtoms1+nAtoms2)+' atoms')
	print(str(nBonds1+nBonds2)+' bonds') 
	print(str(nAngles1+nAngles2)+' angles') 
	print(str(nDiheds1+nDiheds2)+' dihedrals')
	print(str(nImp1+nImp2)+' impropers') 
	print('')
	print(str(nAtTyp1+nAtTyp2)+' atom types')
	print(str(nBTyp1+nBTyp2)+' bond types') 
	print(str(nAngTyp1+nAngTyp2)+' angle types') 
	print(str(nDiTyp1+nDiTyp2)+' dihedral types') 
	print(str(nImTyp1+nImTyp2)+' improper types') 
	print('') 
	print('-5 20 xlo xhi')
	print('-5 20 ylo yhi')
	print('-5 20 zlo zhi')
	print('')
	# Print force field coefficients 
	printData(f1lines, f2lines, nAtoms1, nAtoms2, 'Masses')
	printData(f1lines, f2lines, nAtoms1, nAtoms2, 'Pair Coeffs')
	printData(f1lines, f2lines, nBonds1, nBonds2, 'Bond Coeffs')
	printData(f1lines, f2lines, nAngles1, nAngles2, 'Angle Coeffs')
	printData(f1lines, f2lines, nDiheds1, nDiheds2, 'Dihedral Coeffs') 
	printData(f1lines, f2lines, nImp1, nImp2, 'Improper Coeffs')
	yOffset = 3.6
	# print atom coords
	printAtomData(f1lines, f2lines, nAtoms1, nAtoms2, yOffset)
	# print bonds, angles, topology info 
	printDataTop(f1lines, f2lines, nBonds1, nBonds2, nAtoms1, 'Bonds') 
	printDataTop(f1lines, f2lines, nAngles1, nAngles2, nAtoms1, 'Angles') 
	printDataTop(f1lines, f2lines, nDiheds1, nDiheds2, nAtoms1, 'Dihedrals') 
	printDataTop(f1lines, f2lines, nImp1, nImp2, nAtoms1, 'Impropers') 
	
main()
